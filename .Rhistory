abline(v = 0, lty = 2)
dend <- knesst_dend
dend1 <- CBS_dend
cor_bakers_gamma(dend,dend1)
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
dend <- knesst_dend
dend1 <- CBS_dend
the_cor cor_bakers_gamma(dend,dend1)
dend <- knesst_dend
dend1 <- CBS_dend
the_cor <- cor_bakers_gamma(dend,dend1)
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
abline(v = the_cor2, lty = 2, col = 4)
dend <- knesst_dend
dend1 <- CBS_dend
the_cor <- cor_bakers_gamma(dend,dend)
the_cor <- cor_bakers_gamma(dend,dend1)
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
legend("topleft", legend = c("cor", "cor2"), fill = c(2,4))
round(sum(the_cor2 < cor_bakers_gamma_results)/ R, 4)
dend <- knesst_dend
dend1 <- CBS_dend
the_cor <- cor_bakers_gamma(dend,dend)
the_cor <- cor_bakers_gamma(dend,dend1)
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
legend("topleft", legend = c("cor"), fill = c(2,4))
dend <- knesst_dend
dend1 <- CBS_dend
the_cor <- cor_bakers_gamma(dend,dend1)
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
legend("topleft", legend = c("cor"), fill = c(2,4))
CI95 <- quantile(cor_bakers_gamma_results, probs=c(.025,.975))
CI95
dend2<- knesst_dend
dend1 <- CBS_dend
cor_bakers_gamma(dend1, dend2)
dend1 <- match_order_by_labels(dend1, dend2) # if you are not sure
cor_bakers_gamma(dend1, dend2, use_labels_not_values = FALSE)
library(microbenchmark)
install.packages("microbenchmark")
cor_bakers_gamma(dend1, dend2)
dend1 <- match_order_by_labels(dend1, dend2) # if you are not sure
cor_bakers_gamma(dend1, dend2, use_labels_not_values = FALSE)
library(microbenchmark)
microbenchmark(
with_labels = cor_bakers_gamma(dend1, dend2, try_cutree_hclust = FALSE),
with_values = cor_bakers_gamma(dend1, dend2,
use_labels_not_values = FALSE, try_cutree_hclust = FALSE
),
times = 10
)
cor_bakers_gamma(dend1, dend1, use_labels_not_values = FALSE)
cor_bakers_gamma(dend1, dend1, use_labels_not_values = TRUE)
dend <- knesst_dend
dend <- knesst_dend
dend1 <- CBS_dend
the_cor <- cor_bakers_gamma(dend,dend1)
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
legend("topleft", legend = c("cor"), fill = c(2,4))
dend <- knesst_dend
dend1 <- CBS_dend
the_cor <- cor_bakers_gamma(dend,dend1)
# R <- 100
# cor_bakers_gamma_results <- numeric(R)
# dend_mixed <- dend
# for(i in 1:R) {
#    dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
#    cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
# }
# plot(density(cor_bakers_gamma_results),
#      main = "Baker's gamma distribution under H0",
#      xlim = c(-1,1))
# abline(v = 0, lty = 2)
# abline(v = the_cor, lty = 2, col = 2)
# legend("topleft", legend = c("cor"), fill = c(2,4))
dend <- knesst_dend
dend1 <- CBS_dend
the_cor <- cor_bakers_gamma(dend,dend1)
the_cor
# R <- 100
# cor_bakers_gamma_results <- numeric(R)
# dend_mixed <- dend
# for(i in 1:R) {
#    dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
#    cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
# }
# plot(density(cor_bakers_gamma_results),
#      main = "Baker's gamma distribution under H0",
#      xlim = c(-1,1))
# abline(v = 0, lty = 2)
# abline(v = the_cor, lty = 2, col = 2)
# legend("topleft", legend = c("cor"), fill = c(2,4))
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
legend("topleft", legend = c("cor"), fill = c(2,4))
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
legend("topleft", legend = c("cor"), fill = c(2,4))
title(sub = paste("One sided p-value:",
"cor =",  round(sum(the_cor < cor_bakers_gamma_results)/ R, 4)))
the_cor <- cor_bakers_gamma(dend,dend)
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
legend("topleft", legend = c("cor"), fill = c(2,4))
title(sub = paste("One sided p-value:",
"cor =",  round(sum(the_cor < cor_bakers_gamma_results)/ R, 4)))
options(scipen = 999)
ob <- c(rep(1,20),rep(2,30),rep(3,50))
sampling <- NULL
for (i in 1:10) {
first_10 <- rnorm(3,0,1) #mu
sampling <- rbind(sampling,first_10)
colnames(sampling) <- c(1:3)
}
library('MASS')
library(data.table)
library(ggplot2)
library(kableExtra)
library(dplyr)
library(dendextend)
library(readxl)
library(fuzzyjoin)
library(stringr)
library(ggdendro)
library(factoextra)
options(scipen = 999)
ob <- c(rep(1,20),rep(2,30),rep(3,50))
sampling <- NULL
for (i in 1:10) {
first_10 <- rnorm(3,0,1) #mu
sampling <- rbind(sampling,first_10)
colnames(sampling) <- c(1:3)
}
options(scipen = 999)
ob <- c(rep(1,20),rep(2,30),rep(3,50))
sampling <- NULL
for (i in 1:10) {
first_10 <- rnorm(3,0,1) #mu
sampling <- rbind(sampling,first_10)
colnames(sampling) <- c(1:3)
}
library('MASS')
library(data.table)
library(ggplot2)
library(kableExtra)
library(dplyr)
library(dendextend)
library(readxl)
library(fuzzyjoin)
library(stringr)
library(ggdendro)
library(factoextra)
options(scipen = 999)
ob <- c(rep(1,20),rep(2,30),rep(3,50))
sampling <- NULL
for (i in 1:10) {
first_10 <- rnorm(3,0,1) #mu
sampling <- rbind(sampling,first_10)
colnames(sampling) <- c(1:3)
}
ob
sampling <- NULL
for (i in 1:10) {
first_10 <- rnorm(3,0,1) #mu
sampling <- rbind(sampling,first_10)
colnames(sampling) <- c(1:3)
}
ob <- c(rep(1,20),rep(2,30),rep(3,50))
ob
first_10 <- rnorm(3,0,1) #mu
first_10
options(scipen = 999)
ob <- c(rep(1,20),rep(2,30),rep(3,50))
sampling <- NULL
for (i in 1:10) {
first_10 <- rnorm(3,0,1) #mu
sampling <- rbind(sampling,first_10)
colnames(sampling) <- c(1:3)
}
sampling
calculate.accuracy <- function(data, cluster_data){
tab <- table(data,cluster_data)
s <- 0
b <- NULL
for(i in 1:3){
w<- tab[,i]
m <- max(w)
wm <- which.max(w)
while(wm %in% b){
w <- w[-wm,]
m <- max(w)
wm <- which.max(w)
}
s<- s+m
}
s <- s/100
return(s)
}
multi_fun <- function(s){
start.time <- Sys.time()
model <- kmeans(s,3,1,algorithm = "Lloyd")
end.time <- Sys.time()
time.taken <- end.time - start.time
accurancy <- model$cluster
accurancy <- calculate.accuracy(accurancy,ob)
return(list(accurancy,time.taken))
}
create_data <- function(sampling, p, sigma_e){
x_data <- NULL
if(p >10){
mu_num <- rep(0,(p - 10))
mu <- cbind(mu_num, mu_num, mu_num)
mu <- rbind(sampling,mu)
mu <- as.data.frame(mu)
} else {
mu <- as.data.frame(sampling)
}
d <- diag(sqrt(rep(sigma_e,p)))
dat_a = mvrnorm(20,mu = mu[,1],Sigma=  d)
dat_b = mvrnorm(30,mu = mu[,2],Sigma=  d)
dat_c = mvrnorm(50,mu = mu[,3],Sigma=  d)
x_data = rbind(dat_a, dat_b,dat_c)
return(x_data)
}
temp <- NULL
temp2 <- NULL
for(i in 1:12){
df <- gene[,i]
df <- rbindlist(lapply(df, as.data.frame.list))
colnames(df) <- c("accurancy", "run.time")
temp2 <- rbind(temp2,list(df))
df <- round(c(avg = mean(df$accurancy),sd_accurancy = sd(df$accurancy)),3)
temp <- rbind(temp,df)
}
sigma_list <- c(1,2,6,9)
p <- c(10,20,50)
simulation <- function(sampling,p,sigma_list,B){
s_total <- NULL
for (i in p) {
for (j in sigma_list) {
s <- NULL
s <- replicate( n = B,sampling,simplify = F)
s <- lapply(s,create_data,p = i,sigma_e = j)
s <- lapply(s, multi_fun)
s_total <- cbind(s_total,s)
}
}
return(s_total)
}
gene <- simulation(sampling,p,sigma_list,50)
l <- c(paste0("p = ",10, ",sigma = ",1),paste0("p = ",10, ",sigma = ",2),
paste0("p = ",10, ",sigma = ",6),paste0("p = ",10, ",sigma = ",9),
paste0("p = ",20, ",sigma = ",1),paste0("p = ",20, ",sigma = ",2),
paste0("p = ",20, ",sigma = ",6),paste0("p = ",20, ",sigma = ",9),
paste0("p = ",50, ",sigma = ",1),paste0("p = ",50, ",sigma = ",2),
paste0("p = ",50, ",sigma = ",6),paste0("p = ",50, ",sigma = ",9))
k_sh_p <- c(rep(10,4),rep(20,4),rep(50,4))
k_col_sig <- rep(sigma_list,3)
temp <- NULL
temp2 <- NULL
for(i in 1:12){
df <- gene[,i]
df <- rbindlist(lapply(df, as.data.frame.list))
colnames(df) <- c("accurancy", "run.time")
temp2 <- rbind(temp2,list(df))
df <- round(c(avg = mean(df$accurancy),sd_accurancy = sd(df$accurancy)),3)
temp <- rbind(temp,df)
}
names(temp2) <- l
row.names(temp) <- l
temp <- as.data.frame(temp)
temp <- cbind(temp,k_col_sig,k_sh_p)
ggplot(temp,aes(x = sd_accurancy, y = avg, color = factor(k_col_sig), shape = factor(k_sh_p))) + geom_point()
#kable(temp) %>% kable_styling()
#kable(temp) %>% kable_styling()
#kable(temp) %>% kable_styling()
temp2 <-bind_rows(temp2, .id = "column_label")
ggplot(temp2, aes(x = run.time, y = accurancy, group = column_label, col = column_label)) + geom_point()+ facet_wrap(~column_label)+ theme(legend.position = "none")
k_means_shiny <- function(k){
data_prep <- scale(med_dat,T,T)
data_prep[is.na(data_prep)] <- 0
m_new <- sample_n(med_dat,k)
c_t <- apply(data_prep,1 ,FUN = c_fun, m=m_new)
#while(any(abs(m_new - m_old)) > 0.001){
#data_prep["cluster"] <- c_t
#m_old <- m_new
#m_new <- data_prep %>% group_by(cluster) %>% summarise(mean)
#c_t <- data_prep[,!"cluster"]  %>% lapply(FUN = c_fun,m = m_new)
#print(data_prep[,"cluster"])
#}
#return(data_prep[,"cluster"])
}
c_fun <- function(d,m){
p <- (sweep(m,2,d))**2
print(m)
print(p)
p <- apply(p,1,sum)
p <- which.min(p)
return(p)
}
med_dat <- read.delim('C:/Users/abig4/OneDrive/Documents/GitHub/Statistical-Learning_Lab_2/gtex_Kmeans/gtex.gct',
skip = 2 ,row.names=c(1) , header = TRUE)
med_dat <- read.delim("C:/Users/Shahar/Documents/GitHub/Statistical-Learning_Lab_2/gtex_Kmeans/gtex.gct",
skip = 2 ,row.names=c(1) , header = TRUE)
k_means_shiny <- function(k){
data_prep <- scale(med_dat,T,T)
data_prep[is.na(data_prep)] <- 0
m_new <- sample_n(med_dat,k)
c_t <- apply(data_prep,1 ,FUN = c_fun, m=m_new)
#while(any(abs(m_new - m_old)) > 0.001){
#data_prep["cluster"] <- c_t
#m_old <- m_new
#m_new <- data_prep %>% group_by(cluster) %>% summarise(mean)
#c_t <- data_prep[,!"cluster"]  %>% lapply(FUN = c_fun,m = m_new)
#print(data_prep[,"cluster"])
#}
#return(data_prep[,"cluster"])
}
c_fun <- function(d,m){
p <- (sweep(m,2,d))**2
print(m)
print(p)
p <- apply(p,1,sum)
p <- which.min(p)
return(p)
}
#med_dat <- read.delim('C:/Users/abig4/OneDrive/Documents/GitHub/Statistical-Learning_Lab_2/gtex_Kmeans/gtex.gct',
skip = 2 ,row.names=c(1) , header = TRUE)
k_means_shiny <- function(k){
data_prep <- scale(med_dat,T,T)
data_prep[is.na(data_prep)] <- 0
m_new <- sample_n(med_dat,k)
c_t <- apply(data_prep,1 ,FUN = c_fun, m=m_new)
#while(any(abs(m_new - m_old)) > 0.001){
#data_prep["cluster"] <- c_t
#m_old <- m_new
#m_new <- data_prep %>% group_by(cluster) %>% summarise(mean)
#c_t <- data_prep[,!"cluster"]  %>% lapply(FUN = c_fun,m = m_new)
#print(data_prep[,"cluster"])
#}
#return(data_prep[,"cluster"])
}
c_fun <- function(d,m){
p <- (sweep(m,2,d))**2
print(m)
print(p)
p <- apply(p,1,sum)
p <- which.min(p)
return(p)
}
# med_dat <- read.delim('C:/Users/abig4/OneDrive/Documents/GitHub/Statistical-Learning_Lab_2/gtex_Kmeans/gtex.gct',
#                      skip = 2 ,row.names=c(1) , header = TRUE)
med_dat <- read.delim("C:/Users/Shahar/Documents/GitHub/Statistical-Learning_Lab_2/gtex_Kmeans/gtex.gct",
skip = 2 ,row.names=c(1) , header = TRUE)
gen_names <- med_dat[, 1]
med_dat <- med_dat[,-1]
med_dat <- transpose(med_dat)
k_means_shiny(15)
library('MASS')
library(data.table)
library(ggplot2)
library(kableExtra)
library(dplyr)
library(dendextend)
library(readxl)
library(fuzzyjoin)
library(stringr)
library(ggdendro)
library(factoextra)
#load the data frames
knesset_df <- read.csv("C:/Users/Shahar/Dropbox/zugi/lemida/knesset_24.csv", encoding = "UTF-8")
CBS_df <- read_excel("C:/Users/Shahar/Dropbox/zugi/lemida/t01.xls")
#first, we merge the data frames to find the matching locations in both.
merged_df <- left_join(CBS_df, knesset_df, by = "סמל.ישוב")
#add "שם.ישוב" coloumn to the CBS data frame
names_df <- as.data.frame(knesset_df[,2:3])
CBS_df <- left_join(CBS_df, names_df)
#semple 20 locations
set.seed(20)
Semp_20 <- sample(merged_df$"סמל.ישוב" , 20)
# sum all the votes for each location
#calculate the persents of votes for each party in every location
knesset_df_norm <- knesset_df %>%rowwise %>% mutate(total_votes = sum(c_across( 8:46))) %>% ungroup() %>%  mutate(round(across(8:46, ~ . / total_votes),3))
#filter each data frame for the sempled values.
knesset_semp20 <- filter(knesset_df_norm, knesset_df_norm$"סמל.ישוב" %in% Semp_20)
CBS_semp20 <- filter(CBS_df, CBS_df$"סמל.ישוב" %in% Semp_20)
knesst_dist <- knesset_semp20[,c(8:46)] %>% dist %>% hclust(method = "complete")
knesst_dend <- as.dendrogram(knesst_dist)
labels(knesst_dend) <- as.character(knesset_semp20$'שם.ישוב')
Knesst_plot <- ggplot(knesst_dend %>%
set('branches_lwd', 0.7) %>%
set('labels_cex', 0.8),
horiz = TRUE) +
ggtitle("Hirarchical tree of the 24 election datas with complete linked algorithm", "*Each color present diffrent cluster")
Knesst_plot
CBS_dist <- CBS_semp20[,6:17] %>% scale %>% dist %>% hclust(method = "complete")
CBS_dend <- as.dendrogram(CBS_dist)
labels(CBS_dend) <- as.character(CBS_semp20$'שם.ישוב')
CBS_plot <- ggplot(CBS_dend %>%
set('branches_lwd', 0.7) %>%
set('labels_cex', 0.8), horiz = TRUE) +
ggtitle("Hirarchical tree of the CBS datas with complete linked algorithm", "*Each color present diffrent cluster")
CBS_plot
dend <- knesst_dend
dend1 <- CBS_dend
cor <- cor_bakers_gamma(dend,dend1)
cor
the_cor <- cor_bakers_gamma(dend,dend)
R <- 100
cor_bakers_gamma_results <- numeric(R)
dend_mixed <- dend
for(i in 1:R) {
dend_mixed <- sample.dendrogram(dend_mixed, replace = FALSE)
cor_bakers_gamma_results[i] <- cor_bakers_gamma(dend, dend_mixed)
}
plot(density(cor_bakers_gamma_results),
main = "Baker's gamma distribution under H0",
xlim = c(-1,1))
abline(v = 0, lty = 2)
abline(v = the_cor, lty = 2, col = 2)
legend("topleft", legend = c("cor"), fill = c(2,4))
title(sub = paste("One sided p-value:",
"cor =",  round(sum(the_cor < cor_bakers_gamma_results)/ R, 4)))
